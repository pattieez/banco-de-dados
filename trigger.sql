CREATE TABLE USUARIO (
    IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30),
    SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO (
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDUSUARIO INT,
    NOME VARCHAR(30),
    LOGIN VARCHAR(30)
);

DELIMITER $

-- fazer backup do usuario que foi deletado
CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO
FOR EACH ROW 
BEGIN
	INSERT INTO BKP_USUARIO VALUES(NULL, OLD.IDUSUARIO, OLD.NOME, OLD.LOGIN);
END
$

DELIMITER ;

INSERT INTO USUARIO VALUES(NULL, 'ANDRADE', 'ANDRADE2009', 'HEXA');

-- COMUNICAÇÃO ENTRE BANCOS
CREATE TABLE PRODUTO (
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10 , 2 )
);

CREATE DATABASE BACKUP;
USE BACKUP; -- CONECTAR AO BANCO DE BACKUP

CREATE TABLE BKP_PRODUTO (
    IDBKP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR FLOAT(10 , 2)
);

USE LOJA; -- TROCAR DE BANCO

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, 1000, 'TESTE', 0.0); -- testar banco backup

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO -- antes de inserir id ficara 0 no banco de backup
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
$

INSERT INTO PRODUTO VALUES(NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO ORACLE', 90.00);
INSERT INTO PRODUTO VALUES(NULL, 'LIVRO SQL', 100.00);

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE  ON PRODUTO 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR);
END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

CREATE TRIGGER BACKUP_PRODUTO_AFTER
AFTER INSERT ON PRODUTO -- depois de inserir
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, NEW.IDPRODUTO, NEW.NOME, NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES (NULL, 'LIVRO C#', 100.00);

SELECT * FROM BACKUP.BKP_PRODUTO;

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DEL;

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE  ON PRODUTO 
FOR EACH ROW 
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, 'D');
END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

SELECT * FROM BACKUP.BKP_PRODUTO;

-- TRIGGER DE AUDITORIA
DROP DATABASE BACKUP;

CREATE TABLE PRODUCT(
    IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
    NOME VARCHAR(30),
    VALOR FLOAT(10, 2)
);

INSERT INTO PRODUCT VALUES(NULL, 'LIVRO MODELAGEM', 50.00);
INSERT INTO PRODUCT VALUES(NULL, 'LIVRO BI', 80.00);
INSERT INTO PRODUCT VALUES(NULL, 'LIVRO ORACLE', 90.00);
INSERT INTO PRODUCT VALUES(NULL, 'LIVRO SQL', 100.00);

CREATE DATABASE BACKUP;
USE BACKUP;

SELECT NOW(); -- MOSTRA DATA E HORA
SELECT CURRENT_USER(); -- MOSTRA EM QUAL USUARIO ESTA LOGADO

CREATE TABLE BKP_PRODUCT(
    IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
    IDPRODUTO INT,
    NOME VARCHAR(30),
    VALOR_ORIGINAL FLOAT(10, 2),
    VALOR_ALTERADO FLOAT(10, 2),
    DATA DATETIME,
    USUARIO VARCHAR(30),
    EVENTO CHAR(1)
);

DELIMITER $

CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUCT VALUES(NULL, OLD.IDPRODUTO, OLD.NOME, OLD.VALOR, NEW.VALOR, NOW(), CURRENT_USER(), 'U');
END
$

DELIMITER ;

UPDATE PRODUCT SET VALOR = 110.00 WHERE IDPRODUTO = 4;